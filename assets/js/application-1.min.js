jQuery.easing.jswing = jQuery.easing.swing;

jQuery.extend(jQuery.easing, {
  def: "easeOutQuad",
  swing: function(e, t, n, r, i) {
    return jQuery.easing[jQuery.easing.def](e, t, n, r, i);
  },
  easeInQuad: function(e, t, n, r, i) {
    return r * (t /= i) * t + n;
  },
  easeOutQuad: function(e, t, n, r, i) {
    return -r * (t /= i) * (t - 2) + n;
  },
  easeInOutQuad: function(e, t, n, r, i) {
    return (t /= i / 2) < 1 ? r / 2 * t * t + n : -r / 2 * (--t * (t - 2) - 1) + n;
  },
  easeInCubic: function(e, t, n, r, i) {
    return r * (t /= i) * t * t + n;
  },
  easeOutCubic: function(e, t, n, r, i) {
    return r * ((t = t / i - 1) * t * t + 1) + n;
  },
  easeInOutCubic: function(e, t, n, r, i) {
    return (t /= i / 2) < 1 ? r / 2 * t * t * t + n : r / 2 * ((t -= 2) * t * t + 2) + n;
  },
  easeInQuart: function(e, t, n, r, i) {
    return r * (t /= i) * t * t * t + n;
  },
  easeOutQuart: function(e, t, n, r, i) {
    return -r * ((t = t / i - 1) * t * t * t - 1) + n;
  },
  easeInOutQuart: function(e, t, n, r, i) {
    return (t /= i / 2) < 1 ? r / 2 * t * t * t * t + n : -r / 2 * ((t -= 2) * t * t * t - 2) + n;
  },
  easeInQuint: function(e, t, n, r, i) {
    return r * (t /= i) * t * t * t * t + n;
  },
  easeOutQuint: function(e, t, n, r, i) {
    return r * ((t = t / i - 1) * t * t * t * t + 1) + n;
  },
  easeInOutQuint: function(e, t, n, r, i) {
    return (t /= i / 2) < 1 ? r / 2 * t * t * t * t * t + n : r / 2 * ((t -= 2) * t * t * t * t + 2) + n;
  },
  easeInSine: function(e, t, n, r, i) {
    return -r * Math.cos(t / i * (Math.PI / 2)) + r + n;
  },
  easeOutSine: function(e, t, n, r, i) {
    return r * Math.sin(t / i * (Math.PI / 2)) + n;
  },
  easeInOutSine: function(e, t, n, r, i) {
    return -r / 2 * (Math.cos(Math.PI * t / i) - 1) + n;
  },
  easeInExpo: function(e, t, n, r, i) {
    return t == 0 ? n : r * Math.pow(2, 10 * (t / i - 1)) + n;
  },
  easeOutExpo: function(e, t, n, r, i) {
    return t == i ? n + r : r * (-Math.pow(2, -10 * t / i) + 1) + n;
  },
  easeInOutExpo: function(e, t, n, r, i) {
    return t == 0 ? n : t == i ? n + r : (t /= i / 2) < 1 ? r / 2 * Math.pow(2, 10 * (t - 1)) + n : r / 2 * (-Math.pow(2, -10 * --t) + 2) + n;
  },
  easeInCirc: function(e, t, n, r, i) {
    return -r * (Math.sqrt(1 - (t /= i) * t) - 1) + n;
  },
  easeOutCirc: function(e, t, n, r, i) {
    return r * Math.sqrt(1 - (t = t / i - 1) * t) + n;
  },
  easeInOutCirc: function(e, t, n, r, i) {
    return (t /= i / 2) < 1 ? -r / 2 * (Math.sqrt(1 - t * t) - 1) + n : r / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + n;
  },
  easeInElastic: function(e, t, n, r, i) {
    var s = 1.70158, o = 0, u = r;
    if (t == 0) return n;
    if ((t /= i) == 1) return n + r;
    o || (o = i * .3);
    if (u < Math.abs(r)) {
      u = r;
      var s = o / 4;
    } else var s = o / (2 * Math.PI) * Math.asin(r / u);
    return -(u * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * i - s) * 2 * Math.PI / o)) + n;
  },
  easeOutElastic: function(e, t, n, r, i) {
    var s = 1.70158, o = 0, u = r;
    if (t == 0) return n;
    if ((t /= i) == 1) return n + r;
    o || (o = i * .3);
    if (u < Math.abs(r)) {
      u = r;
      var s = o / 4;
    } else var s = o / (2 * Math.PI) * Math.asin(r / u);
    return u * Math.pow(2, -10 * t) * Math.sin((t * i - s) * 2 * Math.PI / o) + r + n;
  },
  easeInOutElastic: function(e, t, n, r, i) {
    var s = 1.70158, o = 0, u = r;
    if (t == 0) return n;
    if ((t /= i / 2) == 2) return n + r;
    o || (o = i * .3 * 1.5);
    if (u < Math.abs(r)) {
      u = r;
      var s = o / 4;
    } else var s = o / (2 * Math.PI) * Math.asin(r / u);
    return t < 1 ? -0.5 * u * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * i - s) * 2 * Math.PI / o) + n : u * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * i - s) * 2 * Math.PI / o) * .5 + r + n;
  },
  easeInBack: function(e, t, n, r, i, s) {
    s == undefined && (s = 1.70158);
    return r * (t /= i) * t * ((s + 1) * t - s) + n;
  },
  easeOutBack: function(e, t, n, r, i, s) {
    s == undefined && (s = 1.70158);
    return r * ((t = t / i - 1) * t * ((s + 1) * t + s) + 1) + n;
  },
  easeInOutBack: function(e, t, n, r, i, s) {
    s == undefined && (s = 1.70158);
    return (t /= i / 2) < 1 ? r / 2 * t * t * (((s *= 1.525) + 1) * t - s) + n : r / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + n;
  },
  easeInBounce: function(e, t, n, r, i) {
    return r - jQuery.easing.easeOutBounce(e, i - t, 0, r, i) + n;
  },
  easeOutBounce: function(e, t, n, r, i) {
    return (t /= i) < 1 / 2.75 ? r * 7.5625 * t * t + n : t < 2 / 2.75 ? r * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + n : t < 2.5 / 2.75 ? r * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + n : r * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + n;
  },
  easeInOutBounce: function(e, t, n, r, i) {
    return t < i / 2 ? jQuery.easing.easeInBounce(e, t * 2, 0, r, i) * .5 + n : jQuery.easing.easeOutBounce(e, t * 2 - i, 0, r, i) * .5 + r * .5 + n;
  }
});

(function(e) {
  e.fn.superfish = function(t) {
    var n = e.fn.superfish, r = n.c, i = e([ '<span class="', r.arrowClass, '"> &#187;</span>' ].join("")), s = function() {
      var t = e(this), n = u(t);
      clearTimeout(n.sfTimer);
      t.showSuperfishUl().siblings().hideSuperfishUl();
    }, o = function() {
      var t = e(this), r = u(t), i = n.op;
      clearTimeout(r.sfTimer);
      r.sfTimer = setTimeout(function() {
        i.retainPath = e.inArray(t[0], i.$path) > -1;
        t.hideSuperfishUl();
        i.$path.length && t.parents([ "li.", i.hoverClass ].join("")).length < 1 && s.call(i.$path);
      }, i.delay);
    }, u = function(e) {
      var t = e.parents([ "ul.", r.menuClass, ":first" ].join(""))[0];
      n.op = n.o[t.serial];
      return t;
    }, a = function(e) {
      e.addClass(r.anchorClass).append(i.clone());
    };
    return this.each(function() {
      var i = this.serial = n.o.length, u = e.extend({}, n.defaults, t);
      u.$path = e("li." + u.pathClass, this).slice(0, u.pathLevels).each(function() {
        e(this).addClass([ u.hoverClass, r.bcClass ].join(" ")).filter("li:has(ul)").removeClass(u.pathClass);
      });
      n.o[i] = n.op = u;
      e("li:has(ul)", this)[e.fn.hoverIntent && !u.disableHI ? "hoverIntent" : "hover"](s, o).each(function() {
        u.autoArrows && a(e(">a:first-child", this));
      }).not("." + r.bcClass).hideSuperfishUl();
      var f = e("a", this);
      f.each(function(e) {
        var t = f.eq(e).parents("li");
      });
      u.onInit.call(this);
    }).each(function() {
      var t = [ r.menuClass ];
      n.op.dropShadows && !(e.browser.msie && e.browser.version < 7) && t.push(r.shadowClass);
      e(this).addClass(t.join(" "));
    });
  };
  var t = e.fn.superfish;
  t.o = [];
  t.op = {};
  t.IE7fix = function() {
    var n = t.op;
    e.browser.msie && e.browser.version > 6 && n.dropShadows && n.animation.opacity != undefined && this.toggleClass(t.c.shadowClass + "-off");
  };
  t.c = {
    bcClass: "sf-breadcrumb",
    menuClass: "sf-js-enabled",
    anchorClass: "sf-with-ul",
    arrowClass: "sf-sub-indicator",
    shadowClass: "sf-shadow"
  };
  t.defaults = {
    hoverClass: "sfHover",
    pathClass: "overideThisToUse",
    pathLevels: 2,
    delay: 800,
    animation: {
      height: "show"
    },
    speed: "normal",
    autoArrows: !1,
    dropShadows: !1,
    disableHI: !1,
    onInit: function() {},
    onBeforeShow: function() {},
    onShow: function() {},
    onHide: function() {}
  };
  e.fn.extend({
    hideSuperfishUl: function() {
      var n = t.op, r = n.retainPath === !0 ? n.$path : "";
      n.retainPath = !1;
      var i = e([ "li.", n.hoverClass ].join(""), this).add(this).not(r).removeClass(n.hoverClass).find(">ul").hide();
      n.onHide.call(i);
      return this;
    },
    showSuperfishUl: function() {
      var e = t.op, n = t.c.shadowClass + "-off", r = this.not(".accorChild").addClass(e.hoverClass).find(">ul:hidden");
      t.IE7fix.call(r);
      e.onBeforeShow.call(r);
      r.animate(e.animation, e.speed, function() {
        t.IE7fix.call(r);
        e.onShow.call(r);
      });
      return this;
    }
  });
})(jQuery);

$(function() {
  $(".sf-menu").superfish();
})(function(e) {
  e.fn.mobileMenu = function(t) {
    var n = {
      defaultText: "Aller sur la page...",
      className: "select-menu",
      subMenuClass: "sub-menu",
      subMenuDash: "&ndash;"
    }, r = e.extend(n, t), i = e(this);
    this.each(function() {
      i.find("ul").addClass(r.subMenuClass);
      e("<select />", {
        "class": r.className
      }).insertAfter(i);
      e("<option />", {
        value: "#",
        text: r.defaultText
      }).appendTo("." + r.className);
      i.find("a,.separator").each(function() {
        var t = e(this), n = t.text(), i = t.parents("." + r.subMenuClass), s = i.length, o;
        if (t.parents("ul").hasClass(r.subMenuClass)) {
          o = Array(s + 1).join(r.subMenuDash);
          n = o + n;
        }
        t.is("span") ? e("<optgroup />", {
          label: n
        }).appendTo("." + r.className) : e("<option />", {
          value: this.href,
          html: n,
          selected: this.href == window.location.href
        }).appendTo("." + r.className);
      });
      e("." + r.className).change(function() {
        var t = e(this).val();
        t !== "#" && (window.location.href = e(this).val());
      });
      e(".select-menu").show();
    });
    return this;
  };
})(jQuery);

jQuery.cookie = function(e, t, n) {
  if (typeof t == "undefined") {
    var a = null;
    if (document.cookie && document.cookie != "") {
      var f = document.cookie.split(";");
      for (var l = 0; l < f.length; l++) {
        var c = jQuery.trim(f[l]);
        if (c.substring(0, e.length + 1) == e + "=") {
          a = decodeURIComponent(c.substring(e.length + 1));
          break;
        }
      }
    }
    return a;
  }
  n = n || {};
  if (t === null) {
    t = "";
    n.expires = -1;
  }
  var r = "";
  if (n.expires && (typeof n.expires == "number" || n.expires.toUTCString)) {
    var i;
    if (typeof n.expires == "number") {
      i = new Date;
      i.setTime(i.getTime() + n.expires * 24 * 60 * 60 * 1e3);
    } else i = n.expires;
    r = "; expires=" + i.toUTCString();
  }
  var s = n.path ? "; path=" + n.path : "", o = n.domain ? "; domain=" + n.domain : "", u = n.secure ? "; secure" : "";
  document.cookie = [ e, "=", encodeURIComponent(t), r, s, o, u ].join("");
};

(function(e) {
  e.flexslider = function(t, n) {
    var r = e(t), i = e.extend({}, e.flexslider.defaults, n), s = i.namespace, o = "ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch, u = o ? "touchend" : "click", a = i.direction === "vertical", f = i.reverse, l = i.itemWidth > 0, c = i.animation === "fade", h = i.asNavFor !== "", p = {};
    e.data(t, "flexslider", r);
    p = {
      init: function() {
        r.animating = !1;
        r.currentSlide = i.startAt;
        r.animatingTo = r.currentSlide;
        r.atEnd = r.currentSlide === 0 || r.currentSlide === r.last;
        r.containerSelector = i.selector.substr(0, i.selector.search(" "));
        r.slides = e(i.selector, r);
        r.container = e(r.containerSelector, r);
        r.count = r.slides.length;
        r.syncExists = e(i.sync).length > 0;
        i.animation === "slide" && (i.animation = "swing");
        r.prop = a ? "top" : "marginLeft";
        r.args = {};
        r.manualPause = !1;
        r.transitions = !i.video && !c && i.useCSS && function() {
          var e = document.createElement("div"), t = [ "perspectiveProperty", "WebkitPerspective", "MozPerspective", "OPerspective", "msPerspective" ];
          for (var n in t) if (e.style[t[n]] !== undefined) {
            r.pfx = t[n].replace("Perspective", "").toLowerCase();
            r.prop = "-" + r.pfx + "-transform";
            return !0;
          }
          return !1;
        }();
        i.controlsContainer !== "" && (r.controlsContainer = e(i.controlsContainer).length > 0 && e(i.controlsContainer));
        i.manualControls !== "" && (r.manualControls = e(i.manualControls).length > 0 && e(i.manualControls));
        if (i.randomize) {
          r.slides.sort(function() {
            return Math.round(Math.random()) - .5;
          });
          r.container.empty().append(r.slides);
        }
        r.doMath();
        h && p.asNav.setup();
        r.setup("init");
        i.controlNav && p.controlNav.setup();
        i.directionNav && p.directionNav.setup();
        i.keyboard && (e(r.containerSelector).length === 1 || i.multipleKeyboard) && e(document).bind("keyup", function(e) {
          var t = e.keyCode;
          if (!r.animating && (t === 39 || t === 37)) {
            var n = t === 39 ? r.getTarget("next") : t === 37 ? r.getTarget("prev") : !1;
            r.flexAnimate(n, i.pauseOnAction);
          }
        });
        i.mousewheel && r.bind("mousewheel", function(e, t, n, s) {
          e.preventDefault();
          var o = t < 0 ? r.getTarget("next") : r.getTarget("prev");
          r.flexAnimate(o, i.pauseOnAction);
        });
        i.pausePlay && p.pausePlay.setup();
        if (i.slideshow) {
          i.pauseOnHover && r.hover(function() {
            !r.manualPlay && !r.manualPause && r.pause();
          }, function() {
            !r.manualPause && !r.manualPlay && r.play();
          });
          i.initDelay > 0 ? setTimeout(r.play, i.initDelay) : r.play();
        }
        o && i.touch && p.touch();
        (!c || c && i.smoothHeight) && e(window).bind("resize focus", p.resize);
        setTimeout(function() {
          i.start(r);
        }, 200);
      },
      asNav: {
        setup: function() {
          r.asNav = !0;
          r.animatingTo = Math.floor(r.currentSlide / r.move);
          r.currentItem = r.currentSlide;
          r.slides.removeClass(s + "active-slide").eq(r.currentItem).addClass(s + "active-slide");
          r.slides.click(function(t) {
            t.preventDefault();
            var n = e(this), s = n.index();
            if (!e(i.asNavFor).data("flexslider").animating && !n.hasClass("active")) {
              r.direction = r.currentItem < s ? "next" : "prev";
              r.flexAnimate(s, i.pauseOnAction, !1, !0, !0);
            }
          });
        }
      },
      controlNav: {
        setup: function() {
          r.manualControls ? p.controlNav.setupManual() : p.controlNav.setupPaging();
        },
        setupPaging: function() {
          var t = i.controlNav === "thumbnails" ? "control-thumbs" : "control-paging", n = 1, a;
          r.controlNavScaffold = e('<ol class="' + s + "control-nav " + s + t + '"></ol>');
          if (r.pagingCount > 1) for (var f = 0; f < r.pagingCount; f++) {
            a = i.controlNav === "thumbnails" ? '<img src="' + r.slides.eq(f).attr("data-thumb") + '"/>' : "<a>" + n + "</a>";
            r.controlNavScaffold.append("<li>" + a + "</li>");
            n++;
          }
          r.controlsContainer ? e(r.controlsContainer).append(r.controlNavScaffold) : r.append(r.controlNavScaffold);
          p.controlNav.set();
          p.controlNav.active();
          r.controlNavScaffold.delegate("a, img", u, function(t) {
            t.preventDefault();
            var n = e(this), o = r.controlNav.index(n);
            if (!n.hasClass(s + "active")) {
              r.direction = o > r.currentSlide ? "next" : "prev";
              r.flexAnimate(o, i.pauseOnAction);
            }
          });
          o && r.controlNavScaffold.delegate("a", "click touchstart", function(e) {
            e.preventDefault();
          });
        },
        setupManual: function() {
          r.controlNav = r.manualControls;
          p.controlNav.active();
          r.controlNav.live(u, function(t) {
            t.preventDefault();
            var n = e(this), o = r.controlNav.index(n);
            if (!n.hasClass(s + "active")) {
              o > r.currentSlide ? r.direction = "next" : r.direction = "prev";
              r.flexAnimate(o, i.pauseOnAction);
            }
          });
          o && r.controlNav.live("click touchstart", function(e) {
            e.preventDefault();
          });
        },
        set: function() {
          var t = i.controlNav === "thumbnails" ? "img" : "a";
          r.controlNav = e("." + s + "control-nav li " + t, r.controlsContainer ? r.controlsContainer : r);
        },
        active: function() {
          r.controlNav.removeClass(s + "active").eq(r.animatingTo).addClass(s + "active");
        },
        update: function(t, n) {
          r.pagingCount > 1 && t === "add" ? r.controlNavScaffold.append(e("<li><a>" + r.count + "</a></li>")) : r.pagingCount === 1 ? r.controlNavScaffold.find("li").remove() : r.controlNav.eq(n).closest("li").remove();
          p.controlNav.set();
          r.pagingCount > 1 && r.pagingCount !== r.controlNav.length ? r.update(n, t) : p.controlNav.active();
        }
      },
      directionNav: {
        setup: function() {
          var t = e('<ul class="' + s + 'direction-nav"><li><a class="' + s + 'prev" href="#">' + i.prevText + '</a></li><li><a class="' + s + 'next" href="#">' + i.nextText + "</a></li></ul>");
          if (r.controlsContainer) {
            e(r.controlsContainer).append(t);
            r.directionNav = e("." + s + "direction-nav li a", r.controlsContainer);
          } else {
            r.append(t);
            r.directionNav = e("." + s + "direction-nav li a", r);
          }
          p.directionNav.update();
          r.directionNav.bind(u, function(t) {
            t.preventDefault();
            var n = e(this).hasClass(s + "next") ? r.getTarget("next") : r.getTarget("prev");
            r.flexAnimate(n, i.pauseOnAction);
          });
          o && r.directionNav.bind("click touchstart", function(e) {
            e.preventDefault();
          });
        },
        update: function() {
          var e = s + "disabled";
          r.pagingCount === 1 ? r.directionNav.addClass(e) : i.animationLoop ? r.directionNav.removeClass(e) : r.animatingTo === 0 ? r.directionNav.removeClass(e).filter("." + s + "prev").addClass(e) : r.animatingTo === r.last ? r.directionNav.removeClass(e).filter("." + s + "next").addClass(e) : r.directionNav.removeClass(e);
        }
      },
      pausePlay: {
        setup: function() {
          var t = e('<div class="' + s + 'pauseplay"><a></a></div>');
          if (r.controlsContainer) {
            r.controlsContainer.append(t);
            r.pausePlay = e("." + s + "pauseplay a", r.controlsContainer);
          } else {
            r.append(t);
            r.pausePlay = e("." + s + "pauseplay a", r);
          }
          p.pausePlay.update(i.slideshow ? s + "pause" : s + "play");
          r.pausePlay.bind(u, function(t) {
            t.preventDefault();
            if (e(this).hasClass(s + "pause")) {
              r.manualPause = !0;
              r.manualPlay = !1;
              r.pause();
            } else {
              r.manualPause = !1;
              r.manualPlay = !0;
              r.play();
            }
          });
          o && r.pausePlay.bind("click touchstart", function(e) {
            e.preventDefault();
          });
        },
        update: function(e) {
          e === "play" ? r.pausePlay.removeClass(s + "pause").addClass(s + "play").text(i.playText) : r.pausePlay.removeClass(s + "play").addClass(s + "pause").text(i.pauseText);
        }
      },
      touch: function() {
        function d(u) {
          if (r.animating) u.preventDefault(); else if (u.touches.length === 1) {
            r.pause();
            o = a ? r.h : r.w;
            h = Number(new Date);
            s = l && f && r.animatingTo === r.last ? 0 : l && f ? r.limit - (r.itemW + i.itemMargin) * r.move * r.animatingTo : l && r.currentSlide === r.last ? r.limit : l ? (r.itemW + i.itemMargin) * r.move * r.currentSlide : f ? (r.last - r.currentSlide + r.cloneOffset) * o : (r.currentSlide + r.cloneOffset) * o;
            e = a ? u.touches[0].pageY : u.touches[0].pageX;
            n = a ? u.touches[0].pageX : u.touches[0].pageY;
            t.addEventListener("touchmove", v, !1);
            t.addEventListener("touchend", m, !1);
          }
        }
        function v(t) {
          u = a ? e - t.touches[0].pageY : e - t.touches[0].pageX;
          p = a ? Math.abs(u) < Math.abs(t.touches[0].pageX - n) : Math.abs(u) < Math.abs(t.touches[0].pageY - n);
          if (!p || Number(new Date) - h > 500) {
            t.preventDefault();
            if (!c && r.transitions) {
              i.animationLoop || (u /= r.currentSlide === 0 && u < 0 || r.currentSlide === r.last && u > 0 ? Math.abs(u) / o + 2 : 1);
              r.setProps(s + u, "setTouch");
            }
          }
        }
        function m(a) {
          t.removeEventListener("touchmove", v, !1);
          if (r.animatingTo === r.currentSlide && !p && u !== null) {
            var l = f ? -u : u, d = l > 0 ? r.getTarget("next") : r.getTarget("prev");
            r.canAdvance(d) && (Number(new Date) - h < 550 && Math.abs(l) > 50 || Math.abs(l) > o / 2) ? r.flexAnimate(d, i.pauseOnAction) : c || r.flexAnimate(r.currentSlide, i.pauseOnAction, !0);
          }
          t.removeEventListener("touchend", m, !1);
          e = null;
          n = null;
          u = null;
          s = null;
        }
        var e, n, s, o, u, h, p = !1;
        t.addEventListener("touchstart", d, !1);
      },
      resize: function() {
        if (!r.animating && r.is(":visible")) {
          l || r.doMath();
          if (c) p.smoothHeight(); else if (l) {
            r.slides.width(r.computedW);
            r.update(r.pagingCount);
            r.setProps();
          } else if (a) {
            r.viewport.height(r.h);
            r.setProps(r.h, "setTotal");
          } else {
            i.smoothHeight && p.smoothHeight();
            r.newSlides.width(r.computedW);
            r.setProps(r.computedW, "setTotal");
          }
        }
      },
      smoothHeight: function(e) {
        if (!a || c) {
          var t = c ? r : r.viewport;
          e ? t.animate({
            height: r.slides.eq(r.animatingTo).height()
          }, e) : t.height(r.slides.eq(r.animatingTo).height());
        }
      },
      sync: function(t) {
        var n = e(i.sync).data("flexslider"), s = r.animatingTo;
        switch (t) {
         case "animate":
          n.flexAnimate(s, i.pauseOnAction, !1, !0);
          break;
         case "play":
          !n.playing && !n.asNav && n.play();
          break;
         case "pause":
          n.pause();
        }
      }
    };
    r.flexAnimate = function(t, n, u, d, v) {
      h && r.pagingCount === 1 && (r.direction = r.currentItem < t ? "next" : "prev");
      if (!r.animating && (r.canAdvance(t, v) || u) && r.is(":visible")) {
        if (h && d) {
          var m = e(i.asNavFor).data("flexslider");
          r.atEnd = t === 0 || t === r.count - 1;
          m.flexAnimate(t, !0, !1, !0, v);
          r.direction = r.currentItem < t ? "next" : "prev";
          m.direction = r.direction;
          if (Math.ceil((t + 1) / r.visible) - 1 === r.currentSlide || t === 0) {
            r.currentItem = t;
            r.slides.removeClass(s + "active-slide").eq(t).addClass(s + "active-slide");
            return !1;
          }
          r.currentItem = t;
          r.slides.removeClass(s + "active-slide").eq(t).addClass(s + "active-slide");
          t = Math.floor(t / r.visible);
        }
        r.animating = !0;
        r.animatingTo = t;
        i.before(r);
        n && r.pause();
        r.syncExists && !v && p.sync("animate");
        i.controlNav && p.controlNav.active();
        l || r.slides.removeClass(s + "active-slide").eq(t).addClass(s + "active-slide");
        r.atEnd = t === 0 || t === r.last;
        i.directionNav && p.directionNav.update();
        if (t === r.last) {
          i.end(r);
          i.animationLoop || r.pause();
        }
        if (!c) {
          var g = a ? r.slides.filter(":first").height() : r.computedW, y, b, w;
          if (l) {
            y = i.itemWidth > r.w ? i.itemMargin * 2 : i.itemMargin;
            w = (r.itemW + y) * r.move * r.animatingTo;
            b = w > r.limit && r.visible !== 1 ? r.limit : w;
          } else r.currentSlide === 0 && t === r.count - 1 && i.animationLoop && r.direction !== "next" ? b = f ? (r.count + r.cloneOffset) * g : 0 : r.currentSlide === r.last && t === 0 && i.animationLoop && r.direction !== "prev" ? b = f ? 0 : (r.count + 1) * g : b = f ? (r.count - 1 - t + r.cloneOffset) * g : (t + r.cloneOffset) * g;
          r.setProps(b, "", i.animationSpeed);
          if (r.transitions) {
            if (!i.animationLoop || !r.atEnd) {
              r.animating = !1;
              r.currentSlide = r.animatingTo;
            }
            r.container.unbind("webkitTransitionEnd transitionend");
            r.container.bind("webkitTransitionEnd transitionend", function() {
              r.wrapup(g);
            });
          } else r.container.animate(r.args, i.animationSpeed, i.easing, function() {
            r.wrapup(g);
          });
        } else if (!o) {
          r.slides.eq(r.currentSlide).fadeOut(i.animationSpeed, i.easing);
          r.slides.eq(t).fadeIn(i.animationSpeed, i.easing, r.wrapup);
        } else {
          r.slides.eq(r.currentSlide).css({
            opacity: 0,
            zIndex: 1
          });
          r.slides.eq(t).css({
            opacity: 1,
            zIndex: 2
          });
          r.slides.unbind("webkitTransitionEnd transitionend");
          r.slides.eq(r.currentSlide).bind("webkitTransitionEnd transitionend", function() {
            i.after(r);
          });
          r.animating = !1;
          r.currentSlide = r.animatingTo;
        }
        i.smoothHeight && p.smoothHeight(i.animationSpeed);
      }
    };
    r.wrapup = function(e) {
      !c && !l && (r.currentSlide === 0 && r.animatingTo === r.last && i.animationLoop ? r.setProps(e, "jumpEnd") : r.currentSlide === r.last && r.animatingTo === 0 && i.animationLoop && r.setProps(e, "jumpStart"));
      r.animating = !1;
      r.currentSlide = r.animatingTo;
      i.after(r);
    };
    r.animateSlides = function() {
      r.animating || r.flexAnimate(r.getTarget("next"));
    };
    r.pause = function() {
      clearInterval(r.animatedSlides);
      r.playing = !1;
      i.pausePlay && p.pausePlay.update("play");
      r.syncExists && p.sync("pause");
    };
    r.play = function() {
      r.animatedSlides = setInterval(r.animateSlides, i.slideshowSpeed);
      r.playing = !0;
      i.pausePlay && p.pausePlay.update("pause");
      r.syncExists && p.sync("play");
    };
    r.canAdvance = function(e, t) {
      var n = h ? r.pagingCount - 1 : r.last;
      return t ? !0 : h && r.currentItem === r.count - 1 && e === 0 && r.direction === "prev" ? !0 : h && r.currentItem === 0 && e === r.pagingCount - 1 && r.direction !== "next" ? !1 : e === r.currentSlide && !h ? !1 : i.animationLoop ? !0 : r.atEnd && r.currentSlide === 0 && e === n && r.direction !== "next" ? !1 : r.atEnd && r.currentSlide === n && e === 0 && r.direction === "next" ? !1 : !0;
    };
    r.getTarget = function(e) {
      r.direction = e;
      return e === "next" ? r.currentSlide === r.last ? 0 : r.currentSlide + 1 : r.currentSlide === 0 ? r.last : r.currentSlide - 1;
    };
    r.setProps = function(e, t, n) {
      var s = function() {
        var n = e ? e : (r.itemW + i.itemMargin) * r.move * r.animatingTo, s = function() {
          if (l) return t === "setTouch" ? e : f && r.animatingTo === r.last ? 0 : f ? r.limit - (r.itemW + i.itemMargin) * r.move * r.animatingTo : r.animatingTo === r.last ? r.limit : n;
          switch (t) {
           case "setTotal":
            return f ? (r.count - 1 - r.currentSlide + r.cloneOffset) * e : (r.currentSlide + r.cloneOffset) * e;
           case "setTouch":
            return f ? e : e;
           case "jumpEnd":
            return f ? e : r.count * e;
           case "jumpStart":
            return f ? r.count * e : e;
           default:
            return e;
          }
        }();
        return s * -1 + "px";
      }();
      if (r.transitions) {
        s = a ? "translate3d(0," + s + ",0)" : "translate3d(" + s + ",0,0)";
        n = n !== undefined ? n / 1e3 + "s" : "0s";
        r.container.css("-" + r.pfx + "-transition-duration", n);
      }
      r.args[r.prop] = s;
      (r.transitions || n === undefined) && r.container.css(r.args);
    };
    r.setup = function(t) {
      if (!c) {
        var n, u;
        if (t === "init") {
          r.viewport = e('<div class="' + s + 'viewport"></div>').css({
            overflow: "hidden",
            position: "relative"
          }).appendTo(r).append(r.container);
          r.cloneCount = 0;
          r.cloneOffset = 0;
          if (f) {
            u = e.makeArray(r.slides).reverse();
            r.slides = e(u);
            r.container.empty().append(r.slides);
          }
        }
        if (i.animationLoop && !l) {
          r.cloneCount = 2;
          r.cloneOffset = 1;
          t !== "init" && r.container.find(".clone").remove();
          r.container.append(r.slides.first().clone().addClass("clone")).prepend(r.slides.last().clone().addClass("clone"));
        }
        r.newSlides = e(i.selector, r);
        n = f ? r.count - 1 - r.currentSlide + r.cloneOffset : r.currentSlide + r.cloneOffset;
        if (a && !l) {
          r.container.height((r.count + r.cloneCount) * 200 + "%").css("position", "absolute").width("100%");
          setTimeout(function() {
            r.newSlides.css({
              display: "block"
            });
            r.doMath();
            r.viewport.height(r.h);
            r.setProps(n * r.h, "init");
          }, t === "init" ? 100 : 0);
        } else {
          r.container.width((r.count + r.cloneCount) * 200 + "%");
          r.setProps(n * r.computedW, "init");
          setTimeout(function() {
            r.doMath();
            r.newSlides.css({
              width: r.computedW,
              "float": "left",
              display: "block"
            });
            i.smoothHeight && p.smoothHeight();
          }, t === "init" ? 100 : 0);
        }
      } else {
        r.slides.css({
          width: "100%",
          "float": "left",
          marginRight: "-100%",
          position: "relative"
        });
        t === "init" && (o ? r.slides.css({
          opacity: 0,
          display: "block",
          webkitTransition: "opacity " + i.animationSpeed / 1e3 + "s ease",
          zIndex: 1
        }).eq(r.currentSlide).css({
          opacity: 1,
          zIndex: 2
        }) : r.slides.eq(r.currentSlide).fadeIn(i.animationSpeed, i.easing));
        i.smoothHeight && p.smoothHeight();
      }
      l || r.slides.removeClass(s + "active-slide").eq(r.currentSlide).addClass(s + "active-slide");
    };
    r.doMath = function() {
      var e = r.slides.first(), t = i.itemMargin, n = i.minItems, s = i.maxItems;
      r.w = r.width();
      r.h = e.height();
      r.boxPadding = e.outerWidth() - e.width();
      if (l) {
        r.itemT = i.itemWidth + t;
        r.minW = n ? n * r.itemT : r.w;
        r.maxW = s ? s * r.itemT : r.w;
        r.itemW = r.minW > r.w ? (r.w - t * n) / n : r.maxW < r.w ? (r.w - t * s) / s : i.itemWidth > r.w ? r.w : i.itemWidth;
        r.visible = Math.floor(r.w / (r.itemW + t));
        r.move = i.move > 0 && i.move < r.visible ? i.move : r.visible;
        r.pagingCount = Math.ceil((r.count - r.visible) / r.move + 1);
        r.last = r.pagingCount - 1;
        r.limit = r.pagingCount === 1 ? 0 : i.itemWidth > r.w ? (r.itemW + t * 2) * r.count - r.w - t : (r.itemW + t) * r.count - r.w - t;
      } else {
        r.itemW = r.w;
        r.pagingCount = r.count;
        r.last = r.count - 1;
      }
      r.computedW = r.itemW - r.boxPadding;
    };
    r.update = function(e, t) {
      r.doMath();
      if (!l) {
        e < r.currentSlide ? r.currentSlide += 1 : e <= r.currentSlide && e !== 0 && (r.currentSlide -= 1);
        r.animatingTo = r.currentSlide;
      }
      if (i.controlNav && !r.manualControls) if (t === "add" && !l || r.pagingCount > r.controlNav.length) p.controlNav.update("add"); else if (t === "remove" && !l || r.pagingCount < r.controlNav.length) {
        if (l && r.currentSlide > r.last) {
          r.currentSlide -= 1;
          r.animatingTo -= 1;
        }
        p.controlNav.update("remove", r.last);
      }
      i.directionNav && p.directionNav.update();
    };
    r.addSlide = function(t, n) {
      var s = e(t);
      r.count += 1;
      r.last = r.count - 1;
      a && f ? n !== undefined ? r.slides.eq(r.count - n).after(s) : r.container.prepend(s) : n !== undefined ? r.slides.eq(n).before(s) : r.container.append(s);
      r.update(n, "add");
      r.slides = e(i.selector + ":not(.clone)", r);
      r.setup();
      i.added(r);
    };
    r.removeSlide = function(t) {
      var n = isNaN(t) ? r.slides.index(e(t)) : t;
      r.count -= 1;
      r.last = r.count - 1;
      isNaN(t) ? e(t, r.slides).remove() : a && f ? r.slides.eq(r.last).remove() : r.slides.eq(t).remove();
      r.doMath();
      r.update(n, "remove");
      r.slides = e(i.selector + ":not(.clone)", r);
      r.setup();
      i.removed(r);
    };
    p.init();
  };
  e.flexslider.defaults = {
    namespace: "flex-",
    selector: ".slides > li",
    animation: "fade",
    easing: "swing",
    direction: "horizontal",
    reverse: !1,
    animationLoop: !0,
    smoothHeight: !1,
    startAt: 0,
    slideshow: !0,
    slideshowSpeed: 7e3,
    animationSpeed: 600,
    initDelay: 0,
    randomize: !1,
    pauseOnAction: !0,
    pauseOnHover: !1,
    useCSS: !0,
    touch: !0,
    video: !1,
    controlNav: !0,
    directionNav: !0,
    prevText: "Previous",
    nextText: "Next",
    keyboard: !0,
    multipleKeyboard: !1,
    mousewheel: !1,
    pausePlay: !1,
    pauseText: "Pause",
    playText: "Play",
    controlsContainer: "",
    manualControls: "",
    sync: "",
    asNavFor: "",
    itemWidth: 0,
    itemMargin: 0,
    minItems: 0,
    maxItems: 0,
    move: 0,
    start: function() {},
    before: function() {},
    after: function() {},
    end: function() {},
    added: function() {},
    removed: function() {}
  };
  e.fn.flexslider = function(t) {
    t === undefined && (t = {});
    if (typeof t == "object") return this.each(function() {
      var n = e(this), r = t.selector ? t.selector : ".slides > li", i = n.find(r);
      if (i.length === 1) {
        i.fadeIn(400);
        t.start && t.start(n);
      } else n.data("flexslider") == undefined && new e.flexslider(this, t);
    });
    var n = e(this).data("flexslider");
    switch (t) {
     case "play":
      n.play();
      break;
     case "pause":
      n.pause();
      break;
     case "next":
      n.flexAnimate(n.getTarget("next"), !0);
      break;
     case "prev":
     case "previous":
      n.flexAnimate(n.getTarget("prev"), !0);
      break;
     default:
      typeof t == "number" && n.flexAnimate(t, !0);
    }
  };
})(jQuery);

$(document).ready(function() {
  $(function() {
    SyntaxHighlighter.all();
  });
  $(window).load(function() {
    $(".flexslider").flexslider({
      animation: "fade",
      controlNav: "true",
      start: function(e) {
        $("body").removeClass("loading");
      }
    });
  });
});

(function(e) {
  e.fn.camera = function(t, n) {
    function i() {
      if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPod/i)) return !0;
    }
    function D() {
      var t = e(y).width();
      e("li", y).removeClass("camera_visThumb");
      e("li", y).each(function() {
        var n = e(this).position(), r = e("ul", y).outerWidth(), i = e("ul", y).offset().left, s = e("> div", y).offset().left, o = s - i;
        o > 0 ? e(".camera_prevThumbs", J).removeClass("hideNav") : e(".camera_prevThumbs", J).addClass("hideNav");
        r - o > t ? e(".camera_nextThumbs", J).removeClass("hideNav") : e(".camera_nextThumbs", J).addClass("hideNav");
        var u = n.left, a = n.left + e(this).width();
        a - o <= t && u - o >= 0 && e(this).addClass("camera_visThumb");
      });
    }
    function B() {
      function r() {
        b = s.width();
        if (t.height.indexOf("%") != -1) {
          var n = Math.round(b / (100 / parseFloat(t.height)));
          t.minHeight != "" && n < parseFloat(t.minHeight) ? w = parseFloat(t.minHeight) : w = n;
          s.css({
            height: w
          });
        } else if (t.height == "auto") w = s.height(); else {
          w = parseFloat(t.height);
          s.css({
            height: w
          });
        }
        e(".camerarelative", l).css({
          width: b,
          height: w
        });
        e(".imgLoaded", l).each(function() {
          var n = e(this), r = n.attr("width"), i = n.attr("height"), s = n.index(), o, u, a = n.attr("data-alignment"), f = n.attr("data-portrait");
          if (typeof a == "undefined" || a === !1 || a === "") a = t.alignment;
          if (typeof f == "undefined" || f === !1 || f === "") f = t.portrait;
          if (f == 0 || f == "false") if (r / i < b / w) {
            var l = b / r, c = Math.abs(w - i * l) * .5;
            switch (a) {
             case "topLeft":
              o = 0;
              break;
             case "topCenter":
              o = 0;
              break;
             case "topRight":
              o = 0;
              break;
             case "centerLeft":
              o = "-" + c + "px";
              break;
             case "center":
              o = "-" + c + "px";
              break;
             case "centerRight":
              o = "-" + c + "px";
              break;
             case "bottomLeft":
              o = "-" + c * 2 + "px";
              break;
             case "bottomCenter":
              o = "-" + c * 2 + "px";
              break;
             case "bottomRight":
              o = "-" + c * 2 + "px";
            }
            n.css({
              height: i * l,
              "margin-left": 0,
              "margin-top": o,
              position: "absolute",
              visibility: "visible",
              width: b
            });
          } else {
            var l = w / i, c = Math.abs(b - r * l) * .5;
            switch (a) {
             case "topLeft":
              u = 0;
              break;
             case "topCenter":
              u = "-" + c + "px";
              break;
             case "topRight":
              u = "-" + c * 2 + "px";
              break;
             case "centerLeft":
              u = 0;
              break;
             case "center":
              u = "-" + c + "px";
              break;
             case "centerRight":
              u = "-" + c * 2 + "px";
              break;
             case "bottomLeft":
              u = 0;
              break;
             case "bottomCenter":
              u = "-" + c + "px";
              break;
             case "bottomRight":
              u = "-" + c * 2 + "px";
            }
            n.css({
              height: w,
              "margin-left": u,
              "margin-top": 0,
              position: "absolute",
              visibility: "visible",
              width: r * l
            });
          } else if (r / i < b / w) {
            var l = w / i, c = Math.abs(b - r * l) * .5;
            switch (a) {
             case "topLeft":
              u = 0;
              break;
             case "topCenter":
              u = c + "px";
              break;
             case "topRight":
              u = c * 2 + "px";
              break;
             case "centerLeft":
              u = 0;
              break;
             case "center":
              u = c + "px";
              break;
             case "centerRight":
              u = c * 2 + "px";
              break;
             case "bottomLeft":
              u = 0;
              break;
             case "bottomCenter":
              u = c + "px";
              break;
             case "bottomRight":
              u = c * 2 + "px";
            }
            n.css({
              height: w,
              "margin-left": u,
              "margin-top": 0,
              position: "absolute",
              visibility: "visible",
              width: r * l
            });
          } else {
            var l = b / r, c = Math.abs(w - i * l) * .5;
            switch (a) {
             case "topLeft":
              o = 0;
              break;
             case "topCenter":
              o = 0;
              break;
             case "topRight":
              o = 0;
              break;
             case "centerLeft":
              o = c + "px";
              break;
             case "center":
              o = c + "px";
              break;
             case "centerRight":
              o = c + "px";
              break;
             case "bottomLeft":
              o = c * 2 + "px";
              break;
             case "bottomCenter":
              o = c * 2 + "px";
              break;
             case "bottomRight":
              o = c * 2 + "px";
            }
            n.css({
              height: i * l,
              "margin-left": 0,
              "margin-top": o,
              position: "absolute",
              visibility: "visible",
              width: b
            });
          }
        });
      }
      var n;
      if (P == 1) {
        clearTimeout(n);
        n = setTimeout(r, 200);
      } else r();
      P = !0;
    }
    function Q(e) {
      for (var t, n, r = e.length; r; t = parseInt(Math.random() * r), n = e[--r], e[r] = e[t], e[t] = n) ;
      return e;
    }
    function G(e) {
      return Math.ceil(e) == Math.floor(e);
    }
    function ut() {
      if (e(y).length && !e(g).length) {
        var t = e(y).outerWidth(), n = e("ul > li", y).outerWidth(), r = e("li.cameracurrent", y).length ? e("li.cameracurrent", y).position() : "", i = e("ul > li", y).length * e("ul > li", y).outerWidth(), o = e("ul", y).offset().left, u = e("> div", y).offset().left, a;
        o < 0 ? a = "-" + (u - o) : a = u - o;
        if (ot == 1) {
          e("ul", y).width(e("ul > li", y).length * e("ul > li", y).outerWidth());
          e(y).length && !e(g).lenght && s.css({
            marginBottom: e(y).outerHeight()
          });
          D();
          e("ul", y).width(e("ul > li", y).length * e("ul > li", y).outerWidth());
          e(y).length && !e(g).lenght && s.css({
            marginBottom: e(y).outerHeight()
          });
        }
        ot = !1;
        var f = e("li.cameracurrent", y).length ? r.left : "", l = e("li.cameracurrent", y).length ? r.left + e("li.cameracurrent", y).outerWidth() : "";
        f < e("li.cameracurrent", y).outerWidth() && (f = 0);
        if (l - a > t) f + t < i ? e("ul", y).animate({
          "margin-left": "-" + f + "px"
        }, 500, D) : e("ul", y).animate({
          "margin-left": "-" + (e("ul", y).outerWidth() - t) + "px"
        }, 500, D); else if (f - a < 0) e("ul", y).animate({
          "margin-left": "-" + f + "px"
        }, 500, D); else {
          e("ul", y).css({
            "margin-left": "auto",
            "margin-right": "auto"
          });
          setTimeout(D, 100);
        }
      }
    }
    function at() {
      tt = 0;
      var n = e(".camera_bar_cont", J).width(), r = e(".camera_bar_cont", J).height();
      if (u != "pie") switch (V) {
       case "leftToRight":
        e("#" + a).css({
          right: n
        });
        break;
       case "rightToLeft":
        e("#" + a).css({
          left: n
        });
        break;
       case "topToBottom":
        e("#" + a).css({
          bottom: r
        });
        break;
       case "bottomToTop":
        e("#" + a).css({
          top: r
        });
      } else rt.clearRect(0, 0, t.pieDiameter, t.pieDiameter);
    }
    function ft(n) {
      f.addClass("camerasliding");
      z = !1;
      var r = parseFloat(e("div.cameraSlide.cameracurrent", l).index());
      if (n > 0) var c = n - 1; else if (r == k - 1) var c = 0; else var c = r + 1;
      var h = e(".cameraSlide:eq(" + c + ")", l), p = e(".cameraSlide:eq(" + (c + 1) + ")", l).addClass("cameranext");
      r != c + 1 && p.hide();
      e(".cameraContent", o).fadeOut(600);
      e(".camera_caption", o).show();
      e(".camerarelative", h).append(e("> div ", f).eq(c).find("> div.camera_effected"));
      e(".camera_target_content .cameraContent:eq(" + c + ")", s).append(e("> div ", f).eq(c).find("> div"));
      if (!e(".imgLoaded", h).length) {
        var d = E[c], v = new Image;
        v.src = d + "?" + (new Date).getTime();
        h.css("visibility", "hidden");
        h.prepend(e(v).attr("class", "imgLoaded").css("visibility", "hidden"));
        var m, S;
        if (!e(v).get(0).complete || m == "0" || S == "0" || typeof m == "undefined" || m === !1 || typeof S == "undefined" || S === !1) {
          e(".camera_loader", s).delay(500).fadeIn(400);
          v.onload = function() {
            m = v.naturalWidth;
            S = v.naturalHeight;
            e(v).attr("data-alignment", N[c]).attr("data-portrait", T[c]);
            e(v).attr("width", m);
            e(v).attr("height", S);
            l.find(".cameraSlide_" + c).hide().css("visibility", "visible");
            B();
            ft(c + 1);
          };
        }
      } else {
        if (E.length > c + 1 && !e(".imgLoaded", p).length) {
          var x = E[c + 1], C = new Image;
          C.src = x + "?" + (new Date).getTime();
          p.prepend(e(C).attr("class", "imgLoaded").css("visibility", "hidden"));
          C.onload = function() {
            m = C.naturalWidth;
            S = C.naturalHeight;
            e(C).attr("data-alignment", N[c + 1]).attr("data-portrait", T[c + 1]);
            e(C).attr("width", m);
            e(C).attr("height", S);
            B();
          };
        }
        t.onLoaded.call(this);
        if (e(".camera_loader", s).is(":visible")) e(".camera_loader", s).fadeOut(400); else {
          e(".camera_loader", s).css({
            visibility: "hidden"
          });
          e(".camera_loader", s).fadeOut(400, function() {
            e(".camera_loader", s).css({
              visibility: "visible"
            });
          });
        }
        var L = t.rows, A = t.cols, M = 1, _ = 0, D, P, H, I, q, R = new Array("simpleFade", "curtainTopLeft", "curtainTopRight", "curtainBottomLeft", "curtainBottomRight", "curtainSliceLeft", "curtainSliceRight", "blindCurtainTopLeft", "blindCurtainTopRight", "blindCurtainBottomLeft", "blindCurtainBottomRight", "blindCurtainSliceBottom", "blindCurtainSliceTop", "stampede", "mosaic", "mosaicReverse", "mosaicRandom", "mosaicSpiral", "mosaicSpiralReverse", "topLeftBottomRight", "bottomRightTopLeft", "bottomLeftTopRight", "topRightBottomLeft", "scrollLeft", "scrollRight", "scrollTop", "scrollBottom", "scrollHorz");
        marginLeft = 0, marginTop = 0, opacityOnGrid = 0;
        t.opacityOnGrid == 1 ? opacityOnGrid = 0 : opacityOnGrid = 1;
        var U = e(" > div", f).eq(c).attr("data-fx");
        i() && t.mobileFx != "" && t.mobileFx != "default" ? I = t.mobileFx : typeof U != "undefined" && U !== !1 && U !== "default" ? I = U : I = t.fx;
        if (I == "random") {
          I = Q(R);
          I = I[0];
        } else {
          I = I;
          if (I.indexOf(",") > 0) {
            I = I.replace(/ /g, "");
            I = I.split(",");
            I = Q(I);
            I = I[0];
          }
        }
        dataEasing = e(" > div", f).eq(c).attr("data-easing");
        mobileEasing = e(" > div", f).eq(c).attr("data-mobileEasing");
        i() && t.mobileEasing != "" && t.mobileEasing != "default" ? typeof mobileEasing != "undefined" && mobileEasing !== !1 && mobileEasing !== "default" ? q = mobileEasing : q = t.mobileEasing : typeof dataEasing != "undefined" && dataEasing !== !1 && dataEasing !== "default" ? q = dataEasing : q = t.easing;
        D = e(" > div", f).eq(c).attr("data-slideOn");
        if (typeof D != "undefined" && D !== !1) X = D; else if (t.slideOn == "random") {
          var X = new Array("next", "prev");
          X = Q(X);
          X = X[0];
        } else X = t.slideOn;
        var G = e(" > div", f).eq(c).attr("data-time");
        typeof G != "undefined" && G !== !1 && G !== "" ? P = parseFloat(G) : P = t.time;
        var Y = e(" > div", f).eq(c).attr("data-transPeriod");
        typeof Y != "undefined" && Y !== !1 && Y !== "" ? H = parseFloat(Y) : H = t.transPeriod;
        if (!e(f).hasClass("camerastarted")) {
          I = "simpleFade";
          X = "next";
          q = "";
          H = 400;
          e(f).addClass("camerastarted");
        }
        switch (I) {
         case "simpleFade":
          A = 1;
          L = 1;
          break;
         case "curtainTopLeft":
          t.slicedCols == 0 ? A = t.cols : A = t.slicedCols;
          L = 1;
          break;
         case "curtainTopRight":
          t.slicedCols == 0 ? A = t.cols : A = t.slicedCols;
          L = 1;
          break;
         case "curtainBottomLeft":
          t.slicedCols == 0 ? A = t.cols : A = t.slicedCols;
          L = 1;
          break;
         case "curtainBottomRight":
          t.slicedCols == 0 ? A = t.cols : A = t.slicedCols;
          L = 1;
          break;
         case "curtainSliceLeft":
          t.slicedCols == 0 ? A = t.cols : A = t.slicedCols;
          L = 1;
          break;
         case "curtainSliceRight":
          t.slicedCols == 0 ? A = t.cols : A = t.slicedCols;
          L = 1;
          break;
         case "blindCurtainTopLeft":
          t.slicedRows == 0 ? L = t.rows : L = t.slicedRows;
          A = 1;
          break;
         case "blindCurtainTopRight":
          t.slicedRows == 0 ? L = t.rows : L = t.slicedRows;
          A = 1;
          break;
         case "blindCurtainBottomLeft":
          t.slicedRows == 0 ? L = t.rows : L = t.slicedRows;
          A = 1;
          break;
         case "blindCurtainBottomRight":
          t.slicedRows == 0 ? L = t.rows : L = t.slicedRows;
          A = 1;
          break;
         case "blindCurtainSliceTop":
          t.slicedRows == 0 ? L = t.rows : L = t.slicedRows;
          A = 1;
          break;
         case "blindCurtainSliceBottom":
          t.slicedRows == 0 ? L = t.rows : L = t.slicedRows;
          A = 1;
          break;
         case "stampede":
          _ = "-" + H;
          break;
         case "mosaic":
          _ = t.gridDifference;
          break;
         case "mosaicReverse":
          _ = t.gridDifference;
          break;
         case "mosaicRandom":
          break;
         case "mosaicSpiral":
          _ = t.gridDifference;
          M = 1.7;
          break;
         case "mosaicSpiralReverse":
          _ = t.gridDifference;
          M = 1.7;
          break;
         case "topLeftBottomRight":
          _ = t.gridDifference;
          M = 6;
          break;
         case "bottomRightTopLeft":
          _ = t.gridDifference;
          M = 6;
          break;
         case "bottomLeftTopRight":
          _ = t.gridDifference;
          M = 6;
          break;
         case "topRightBottomLeft":
          _ = t.gridDifference;
          M = 6;
          break;
         case "scrollLeft":
          A = 1;
          L = 1;
          break;
         case "scrollRight":
          A = 1;
          L = 1;
          break;
         case "scrollTop":
          A = 1;
          L = 1;
          break;
         case "scrollBottom":
          A = 1;
          L = 1;
          break;
         case "scrollHorz":
          A = 1;
          L = 1;
        }
        var Z = 0, et = L * A, it = b - Math.floor(b / A) * A, st = w - Math.floor(w / L) * L, ot, lt, ct = 0, ht = 0, pt = new Array, dt = new Array, vt = new Array;
        while (Z < et) {
          pt.push(Z);
          dt.push(Z);
          O.append('<div class="cameraappended" style="display:none; overflow:hidden; position:absolute; z-index:1000" />');
          var mt = e(".cameraappended:eq(" + Z + ")", l);
          I == "scrollLeft" || I == "scrollRight" || I == "scrollTop" || I == "scrollBottom" || I == "scrollHorz" ? W.eq(c).clone().show().appendTo(mt) : X == "next" ? W.eq(c).clone().show().appendTo(mt) : W.eq(r).clone().show().appendTo(mt);
          Z % A < it ? ot = 1 : ot = 0;
          Z % A == 0 && (ct = 0);
          Math.floor(Z / A) < st ? lt = 1 : lt = 0;
          mt.css({
            height: Math.floor(w / L + lt + 1),
            left: ct,
            top: ht,
            width: Math.floor(b / A + ot + 1)
          });
          e("> .cameraSlide", mt).css({
            height: w,
            "margin-left": "-" + ct + "px",
            "margin-top": "-" + ht + "px",
            width: b
          });
          ct = ct + mt.width() - 1;
          Z % A == A - 1 && (ht = ht + mt.height() - 1);
          Z++;
        }
        switch (I) {
         case "curtainTopLeft":
          break;
         case "curtainBottomLeft":
          break;
         case "curtainSliceLeft":
          break;
         case "curtainTopRight":
          pt = pt.reverse();
          break;
         case "curtainBottomRight":
          pt = pt.reverse();
          break;
         case "curtainSliceRight":
          pt = pt.reverse();
          break;
         case "blindCurtainTopLeft":
          break;
         case "blindCurtainBottomLeft":
          pt = pt.reverse();
          break;
         case "blindCurtainSliceTop":
          break;
         case "blindCurtainTopRight":
          break;
         case "blindCurtainBottomRight":
          pt = pt.reverse();
          break;
         case "blindCurtainSliceBottom":
          pt = pt.reverse();
          break;
         case "stampede":
          pt = Q(pt);
          break;
         case "mosaic":
          break;
         case "mosaicReverse":
          pt = pt.reverse();
          break;
         case "mosaicRandom":
          pt = Q(pt);
          break;
         case "mosaicSpiral":
          var gt = L / 2, yt, bt, wt, Et = 0;
          for (wt = 0; wt < gt; wt++) {
            bt = wt;
            for (yt = wt; yt < A - wt - 1; yt++) vt[Et++] = bt * A + yt;
            yt = A - wt - 1;
            for (bt = wt; bt < L - wt - 1; bt++) vt[Et++] = bt * A + yt;
            bt = L - wt - 1;
            for (yt = A - wt - 1; yt > wt; yt--) vt[Et++] = bt * A + yt;
            yt = wt;
            for (bt = L - wt - 1; bt > wt; bt--) vt[Et++] = bt * A + yt;
          }
          pt = vt;
          break;
         case "mosaicSpiralReverse":
          var gt = L / 2, yt, bt, wt, Et = et - 1;
          for (wt = 0; wt < gt; wt++) {
            bt = wt;
            for (yt = wt; yt < A - wt - 1; yt++) vt[Et--] = bt * A + yt;
            yt = A - wt - 1;
            for (bt = wt; bt < L - wt - 1; bt++) vt[Et--] = bt * A + yt;
            bt = L - wt - 1;
            for (yt = A - wt - 1; yt > wt; yt--) vt[Et--] = bt * A + yt;
            yt = wt;
            for (bt = L - wt - 1; bt > wt; bt--) vt[Et--] = bt * A + yt;
          }
          pt = vt;
          break;
         case "topLeftBottomRight":
          for (var bt = 0; bt < L; bt++) for (var yt = 0; yt < A; yt++) vt.push(yt + bt);
          dt = vt;
          break;
         case "bottomRightTopLeft":
          for (var bt = 0; bt < L; bt++) for (var yt = 0; yt < A; yt++) vt.push(yt + bt);
          dt = vt.reverse();
          break;
         case "bottomLeftTopRight":
          for (var bt = L; bt > 0; bt--) for (var yt = 0; yt < A; yt++) vt.push(yt + bt);
          dt = vt;
          break;
         case "topRightBottomLeft":
          for (var bt = 0; bt < L; bt++) for (var yt = A; yt > 0; yt--) vt.push(yt + bt);
          dt = vt;
        }
        e.each(pt, function(n, i) {
          function d() {
            e(this).addClass("cameraeased");
            e(".cameraeased", l).length >= 0 && e(y).css({
              visibility: "visible"
            });
            if (e(".cameraeased", l).length == et) {
              ut();
              e(".moveFromLeft, .moveFromRight, .moveFromTop, .moveFromBottom, .fadeIn, .fadeFromLeft, .fadeFromRight, .fadeFromTop, .fadeFromBottom", o).each(function() {
                e(this).css("visibility", "hidden");
              });
              W.eq(c).show().css("z-index", "999").removeClass("cameranext").addClass("cameracurrent");
              W.eq(r).css("z-index", "1").removeClass("cameracurrent");
              e(".cameraContent", o).eq(c).addClass("cameracurrent");
              r >= 0 && e(".cameraContent", o).eq(r).removeClass("cameracurrent");
              t.onEndTransition.call(this);
              e("> div", f).eq(c).attr("data-video") != "hide" && e(".cameraContent.cameracurrent .imgFake", o).length && e(".cameraContent.cameracurrent .imgFake", o).click();
              var n = W.eq(c).find(".fadeIn").length, i = e(".cameraContent", o).eq(c).find(".moveFromLeft, .moveFromRight, .moveFromTop, .moveFromBottom, .fadeIn, .fadeFromLeft, .fadeFromRight, .fadeFromTop, .fadeFromBottom").length;
              n != 0 && e(".cameraSlide.cameracurrent .fadeIn", o).each(function() {
                if (e(this).attr("data-easing") != "") var t = e(this).attr("data-easing"); else var t = q;
                var r = e(this);
                if (typeof r.attr("data-outerWidth") == "undefined" || r.attr("data-outerWidth") === !1 || r.attr("data-outerWidth") === "") {
                  var i = r.outerWidth();
                  r.attr("data-outerWidth", i);
                } else var i = r.attr("data-outerWidth");
                if (typeof r.attr("data-outerHeight") == "undefined" || r.attr("data-outerHeight") === !1 || r.attr("data-outerHeight") === "") {
                  var s = r.outerHeight();
                  r.attr("data-outerHeight", s);
                } else var s = r.attr("data-outerHeight");
                var o = r.position(), u = o.left, a = o.top, f = r.attr("class"), l = r.index(), c = r.parents(".camerarelative").outerHeight(), h = r.parents(".camerarelative").outerWidth();
                f.indexOf("fadeIn") != -1 ? r.animate({
                  opacity: 0
                }, 0).css("visibility", "visible").delay(P / n * .1 * (l - 1)).animate({
                  opacity: 1
                }, P / n * .15, t) : r.css("visibility", "visible");
              });
              e(".cameraContent.cameracurrent", o).show();
              i != 0 && e(".cameraContent.cameracurrent .moveFromLeft, .cameraContent.cameracurrent .moveFromRight, .cameraContent.cameracurrent .moveFromTop, .cameraContent.cameracurrent .moveFromBottom, .cameraContent.cameracurrent .fadeIn, .cameraContent.cameracurrent .fadeFromLeft, .cameraContent.cameracurrent .fadeFromRight, .cameraContent.cameracurrent .fadeFromTop, .cameraContent.cameracurrent .fadeFromBottom", o).each(function() {
                if (e(this).attr("data-easing") != "") var t = e(this).attr("data-easing"); else var t = q;
                var n = e(this), r = n.position(), s = r.left, o = r.top, u = n.attr("class"), a = n.index(), f = n.outerHeight();
                if (u.indexOf("moveFromLeft") != -1) {
                  n.css({
                    left: "-" + b + "px",
                    right: "auto"
                  });
                  n.css("visibility", "visible").delay(P / i * .1 * (a - 1)).animate({
                    left: r.left
                  }, P / i * .15, t);
                } else if (u.indexOf("moveFromRight") != -1) {
                  n.css({
                    left: b + "px",
                    right: "auto"
                  });
                  n.css("visibility", "visible").delay(P / i * .1 * (a - 1)).animate({
                    left: r.left
                  }, P / i * .15, t);
                } else if (u.indexOf("moveFromTop") != -1) {
                  n.css({
                    top: "-" + w + "px",
                    bottom: "auto"
                  });
                  n.css("visibility", "visible").delay(P / i * .1 * (a - 1)).animate({
                    top: r.top
                  }, P / i * .15, t, function() {
                    n.css({
                      top: "auto",
                      bottom: 0
                    });
                  });
                } else if (u.indexOf("moveFromBottom") != -1) {
                  n.css({
                    top: w + "px",
                    bottom: "auto"
                  });
                  n.css("visibility", "visible").delay(P / i * .1 * (a - 1)).animate({
                    top: r.top
                  }, P / i * .15, t);
                } else if (u.indexOf("fadeFromLeft") != -1) {
                  n.animate({
                    opacity: 0
                  }, 0).css({
                    left: "-" + b + "px",
                    right: "auto"
                  });
                  n.css("visibility", "visible").delay(P / i * .1 * (a - 1)).animate({
                    left: r.left,
                    opacity: 1
                  }, P / i * .15, t);
                } else if (u.indexOf("fadeFromRight") != -1) {
                  n.animate({
                    opacity: 0
                  }, 0).css({
                    left: b + "px",
                    right: "auto"
                  });
                  n.css("visibility", "visible").delay(P / i * .1 * (a - 1)).animate({
                    left: r.left,
                    opacity: 1
                  }, P / i * .15, t);
                } else if (u.indexOf("fadeFromTop") != -1) {
                  n.animate({
                    opacity: 0
                  }, 0).css({
                    top: "-" + w + "px",
                    bottom: "auto"
                  });
                  n.css("visibility", "visible").delay(P / i * .1 * (a - 1)).animate({
                    top: r.top,
                    opacity: 1
                  }, P / i * .15, t, function() {
                    n.css({
                      top: "auto",
                      bottom: 0
                    });
                  });
                } else if (u.indexOf("fadeFromBottom") != -1) {
                  n.animate({
                    opacity: 0
                  }, 0).css({
                    bottom: "-" + f + "px"
                  });
                  n.css("visibility", "visible").delay(P / i * .1 * (a - 1)).animate({
                    bottom: "0",
                    opacity: 1
                  }, P / i * .15, t);
                } else u.indexOf("fadeIn") != -1 ? n.animate({
                  opacity: 0
                }, 0).css("visibility", "visible").delay(P / i * .1 * (a - 1)).animate({
                  opacity: 1
                }, P / i * .15, t) : n.css("visibility", "visible");
              });
              e(".cameraappended", l).remove();
              f.removeClass("camerasliding");
              W.eq(r).hide();
              var s = e(".camera_bar_cont", J).width(), h = e(".camera_bar_cont", J).height(), d;
              u != "pie" ? d = .05 : d = .005;
              e("#" + a).animate({
                opacity: t.loaderOpacity
              }, 200);
              j = setInterval(function() {
                f.hasClass("stopped") && clearInterval(j);
                if (u != "pie") {
                  if (tt <= 1.002 && !f.hasClass("stopped") && !f.hasClass("paused") && !f.hasClass("hovered")) tt += d; else if (tt <= 1 && (f.hasClass("stopped") || f.hasClass("paused") || f.hasClass("stopped") || f.hasClass("hovered"))) tt = tt; else if (!f.hasClass("stopped") && !f.hasClass("paused") && !f.hasClass("hovered")) {
                    clearInterval(j);
                    K();
                    e("#" + a).animate({
                      opacity: 0
                    }, 200, function() {
                      clearTimeout(F);
                      F = setTimeout(at, p);
                      ft();
                      t.onStartLoading.call(this);
                    });
                  }
                  switch (V) {
                   case "leftToRight":
                    e("#" + a).animate({
                      right: s - s * tt
                    }, P * d, "linear");
                    break;
                   case "rightToLeft":
                    e("#" + a).animate({
                      left: s - s * tt
                    }, P * d, "linear");
                    break;
                   case "topToBottom":
                    e("#" + a).animate({
                      bottom: h - h * tt
                    }, P * d, "linear");
                    break;
                   case "bottomToTop":
                    e("#" + a).animate({
                      bottom: h - h * tt
                    }, P * d, "linear");
                  }
                } else {
                  nt = tt;
                  rt.clearRect(0, 0, t.pieDiameter, t.pieDiameter);
                  rt.globalCompositeOperation = "destination-over";
                  rt.beginPath();
                  rt.arc(t.pieDiameter / 2, t.pieDiameter / 2, t.pieDiameter / 2 - t.loaderStroke, 0, Math.PI * 2, !1);
                  rt.lineWidth = t.loaderStroke;
                  rt.strokeStyle = t.loaderBgColor;
                  rt.stroke();
                  rt.closePath();
                  rt.globalCompositeOperation = "source-over";
                  rt.beginPath();
                  rt.arc(t.pieDiameter / 2, t.pieDiameter / 2, t.pieDiameter / 2 - t.loaderStroke, 0, Math.PI * 2 * nt, !1);
                  rt.lineWidth = t.loaderStroke - t.loaderPadding * 2;
                  rt.strokeStyle = t.loaderColor;
                  rt.stroke();
                  rt.closePath();
                  if (tt <= 1.002 && !f.hasClass("stopped") && !f.hasClass("paused") && !f.hasClass("hovered")) tt += d; else if (tt <= 1 && (f.hasClass("stopped") || f.hasClass("paused") || f.hasClass("hovered"))) tt = tt; else if (!f.hasClass("stopped") && !f.hasClass("paused") && !f.hasClass("hovered")) {
                    clearInterval(j);
                    K();
                    e("#" + a + ", .camera_canvas_wrap", J).animate({
                      opacity: 0
                    }, 200, function() {
                      clearTimeout(F);
                      F = setTimeout(at, p);
                      ft();
                      t.onStartLoading.call(this);
                    });
                  }
                }
              }, P * d);
            }
          }
          i % A < it ? ot = 1 : ot = 0;
          i % A == 0 && (ct = 0);
          Math.floor(i / A) < st ? lt = 1 : lt = 0;
          switch (I) {
           case "simpleFade":
            height = w;
            width = b;
            opacityOnGrid = 0;
            break;
           case "curtainTopLeft":
            height = 0, width = Math.floor(b / A + ot + 1), marginTop = "-" + Math.floor(w / L + lt + 1) + "px";
            break;
           case "curtainTopRight":
            height = 0, width = Math.floor(b / A + ot + 1), marginTop = "-" + Math.floor(w / L + lt + 1) + "px";
            break;
           case "curtainBottomLeft":
            height = 0, width = Math.floor(b / A + ot + 1), marginTop = Math.floor(w / L + lt + 1) + "px";
            break;
           case "curtainBottomRight":
            height = 0, width = Math.floor(b / A + ot + 1), marginTop = Math.floor(w / L + lt + 1) + "px";
            break;
           case "curtainSliceLeft":
            height = 0, width = Math.floor(b / A + ot + 1);
            i % 2 == 0 ? marginTop = Math.floor(w / L + lt + 1) + "px" : marginTop = "-" + Math.floor(w / L + lt + 1) + "px";
            break;
           case "curtainSliceRight":
            height = 0, width = Math.floor(b / A + ot + 1);
            i % 2 == 0 ? marginTop = Math.floor(w / L + lt + 1) + "px" : marginTop = "-" + Math.floor(w / L + lt + 1) + "px";
            break;
           case "blindCurtainTopLeft":
            height = Math.floor(w / L + lt + 1), width = 0, marginLeft = "-" + Math.floor(b / A + ot + 1) + "px";
            break;
           case "blindCurtainTopRight":
            height = Math.floor(w / L + lt + 1), width = 0, marginLeft = Math.floor(b / A + ot + 1) + "px";
            break;
           case "blindCurtainBottomLeft":
            height = Math.floor(w / L + lt + 1), width = 0, marginLeft = "-" + Math.floor(b / A + ot + 1) + "px";
            break;
           case "blindCurtainBottomRight":
            height = Math.floor(w / L + lt + 1), width = 0, marginLeft = Math.floor(b / A + ot + 1) + "px";
            break;
           case "blindCurtainSliceBottom":
            height = Math.floor(w / L + lt + 1), width = 0;
            i % 2 == 0 ? marginLeft = "-" + Math.floor(b / A + ot + 1) + "px" : marginLeft = Math.floor(b / A + ot + 1) + "px";
            break;
           case "blindCurtainSliceTop":
            height = Math.floor(w / L + lt + 1), width = 0;
            i % 2 == 0 ? marginLeft = "-" + Math.floor(b / A + ot + 1) + "px" : marginLeft = Math.floor(b / A + ot + 1) + "px";
            break;
           case "stampede":
            height = 0;
            width = 0;
            marginLeft = b * .2 * (n % A - (A - Math.floor(A / 2))) + "px";
            marginTop = w * .2 * (Math.floor(n / A) + 1 - (L - Math.floor(L / 2))) + "px";
            break;
           case "mosaic":
            height = 0;
            width = 0;
            break;
           case "mosaicReverse":
            height = 0;
            width = 0;
            marginLeft = Math.floor(b / A + ot + 1) + "px";
            marginTop = Math.floor(w / L + lt + 1) + "px";
            break;
           case "mosaicRandom":
            height = 0;
            width = 0;
            marginLeft = Math.floor(b / A + ot + 1) * .5 + "px";
            marginTop = Math.floor(w / L + lt + 1) * .5 + "px";
            break;
           case "mosaicSpiral":
            height = 0;
            width = 0;
            marginLeft = Math.floor(b / A + ot + 1) * .5 + "px";
            marginTop = Math.floor(w / L + lt + 1) * .5 + "px";
            break;
           case "mosaicSpiralReverse":
            height = 0;
            width = 0;
            marginLeft = Math.floor(b / A + ot + 1) * .5 + "px";
            marginTop = Math.floor(w / L + lt + 1) * .5 + "px";
            break;
           case "topLeftBottomRight":
            height = 0;
            width = 0;
            break;
           case "bottomRightTopLeft":
            height = 0;
            width = 0;
            marginLeft = Math.floor(b / A + ot + 1) + "px";
            marginTop = Math.floor(w / L + lt + 1) + "px";
            break;
           case "bottomLeftTopRight":
            height = 0;
            width = 0;
            marginLeft = 0;
            marginTop = Math.floor(w / L + lt + 1) + "px";
            break;
           case "topRightBottomLeft":
            height = 0;
            width = 0;
            marginLeft = Math.floor(b / A + ot + 1) + "px";
            marginTop = 0;
            break;
           case "scrollRight":
            height = w;
            width = b;
            marginLeft = -b;
            break;
           case "scrollLeft":
            height = w;
            width = b;
            marginLeft = b;
            break;
           case "scrollTop":
            height = w;
            width = b;
            marginTop = w;
            break;
           case "scrollBottom":
            height = w;
            width = b;
            marginTop = -w;
            break;
           case "scrollHorz":
            height = w;
            width = b;
            r == 0 && c == k - 1 ? marginLeft = -b : r < c || r == k - 1 && c == 0 ? marginLeft = b : marginLeft = -b;
          }
          var h = e(".cameraappended:eq(" + i + ")", l);
          if (typeof j != "undefined") {
            clearInterval(j);
            clearTimeout(F);
            F = setTimeout(at, H + _);
          }
          if (e(g).length) {
            e(".camera_pag li", s).removeClass("cameracurrent");
            e(".camera_pag li", s).eq(c).addClass("cameracurrent");
          }
          if (e(y).length) {
            e("li", y).removeClass("cameracurrent");
            e("li", y).eq(c).addClass("cameracurrent");
            e("li", y).not(".cameracurrent").find("img").animate({
              opacity: .5
            }, 0);
            e("li.cameracurrent img", y).animate({
              opacity: 1
            }, 0);
            e("li", y).hover(function() {
              e("img", this).stop(!0, !1).animate({
                opacity: 1
              }, 150);
            }, function() {
              e(this).hasClass("cameracurrent") || e("img", this).stop(!0, !1).animate({
                opacity: .5
              }, 150);
            });
          }
          var p = parseFloat(H) + parseFloat(_);
          if (I == "scrollLeft" || I == "scrollRight" || I == "scrollTop" || I == "scrollBottom" || I == "scrollHorz") {
            t.onStartTransition.call(this);
            p = 0;
            h.delay((H + _) / et * dt[n] * M * .5).css({
              display: "block",
              height: height,
              "margin-left": marginLeft,
              "margin-top": marginTop,
              width: width
            }).animate({
              height: Math.floor(w / L + lt + 1),
              "margin-top": 0,
              "margin-left": 0,
              width: Math.floor(b / A + ot + 1)
            }, H - _, q, d);
            W.eq(r).delay((H + _) / et * dt[n] * M * .5).animate({
              "margin-left": marginLeft * -1,
              "margin-top": marginTop * -1
            }, H - _, q, function() {
              e(this).css({
                "margin-top": 0,
                "margin-left": 0
              });
            });
          } else {
            t.onStartTransition.call(this);
            p = parseFloat(H) + parseFloat(_);
            if (X == "next") h.delay((H + _) / et * dt[n] * M * .5).css({
              display: "block",
              height: height,
              "margin-left": marginLeft,
              "margin-top": marginTop,
              width: width,
              opacity: opacityOnGrid
            }).animate({
              height: Math.floor(w / L + lt + 1),
              "margin-top": 0,
              "margin-left": 0,
              opacity: 1,
              width: Math.floor(b / A + ot + 1)
            }, H - _, q, d); else {
              W.eq(c).show().css("z-index", "999").addClass("cameracurrent");
              W.eq(r).css("z-index", "1").removeClass("cameracurrent");
              e(".cameraContent", o).eq(c).addClass("cameracurrent");
              e(".cameraContent", o).eq(r).removeClass("cameracurrent");
              h.delay((H + _) / et * dt[n] * M * .5).css({
                display: "block",
                height: Math.floor(w / L + lt + 1),
                "margin-top": 0,
                "margin-left": 0,
                opacity: 1,
                width: Math.floor(b / A + ot + 1)
              }).animate({
                height: height,
                "margin-left": marginLeft,
                "margin-top": marginTop,
                width: width,
                opacity: opacityOnGrid
              }, H - _, q, d);
            }
          }
        });
      }
    }
    var r = {
      alignment: "center",
      autoAdvance: !0,
      mobileAutoAdvance: !0,
      barDirection: "leftToRight",
      barPosition: "bottom",
      cols: 6,
      easing: "easeInOutExpo",
      mobileEasing: "",
      fx: "simpleFade",
      mobileFx: "",
      gridDifference: 250,
      height: "26.94%",
      imagePath: "img/",
      hover: !0,
      loader: "none",
      loaderColor: "#ffffff",
      loaderBgColor: "#222222",
      loaderOpacity: .8,
      loaderPadding: 2,
      loaderStroke: 7,
      minHeight: "200px",
      navigation: !0,
      navigationHover: !0,
      mobileNavHover: !0,
      opacityOnGrid: !1,
      overlayer: !0,
      pagination: !1,
      playPause: !0,
      pauseOnClick: !0,
      pieDiameter: 38,
      piePosition: "rightTop",
      portrait: !1,
      rows: 4,
      slicedCols: 12,
      slicedRows: 8,
      slideOn: "random",
      thumbnails: !1,
      time: 7e3,
      transPeriod: 1500,
      onEndTransition: function() {},
      onLoaded: function() {},
      onStartLoading: function() {},
      onStartTransition: function() {}
    }, t = e.extend({}, r, t), s = e(this).addClass("camera_wrap");
    s.wrapInner('<div class="camera_src" />').wrapInner('<div class="camera_fakehover" />');
    var o = e(".camera_fakehover", s);
    o.append('<div class="camera_target"></div>');
    t.overlayer == 1 && o.append('<div class="camera_overlayer"></div>');
    o.append('<div class="camera_target_content"></div>');
    var u;
    t.loader == "pie" && e.browser.msie && e.browser.version < 9 ? u = "bar" : u = t.loader;
    u == "pie" ? o.append('<div class="camera_pie"></div>') : u == "bar" ? o.append('<div class="camera_bar"></div>') : o.append('<div class="camera_bar" style="display:none"></div>');
    t.playPause == 1 && o.append('<div class="camera_commands"></div>');
    t.navigation == 1 && o.append('<div class="camera_prev"><span></span></div>').append('<div class="camera_next"><span></span></div>');
    t.thumbnails == 1 && s.append('<div class="camera_thumbs_cont" />');
    t.thumbnails == 1 && t.pagination != 1 && e(".camera_thumbs_cont", s).wrap("<div />").wrap('<div class="camera_thumbs" />').wrap("<div />").wrap('<div class="camera_command_wrap" />');
    t.pagination == 1 && s.append('<div class="camera_pag"></div>');
    s.append('<div class="camera_loader"></div>');
    e(".camera_caption", s).each(function() {
      e(this).wrapInner("<div />");
    });
    var a = "pie_" + s.index(), f = e(".camera_src", s), l = e(".camera_target", s), c = e(".camera_target_content", s), h = e(".camera_pie", s), p = e(".camera_bar", s), d = e(".camera_prev", s), v = e(".camera_next", s), m = e(".camera_commands", s), g = e(".camera_pag", s), y = e(".camera_thumbs_cont", s), b, w, E = new Array;
    e("> div", f).each(function() {
      E.push(e(this).attr("data-src"));
    });
    var S = new Array;
    e("> div", f).each(function() {
      e(this).attr("data-link") ? S.push(e(this).attr("data-link")) : S.push("");
    });
    var x = new Array;
    e("> div", f).each(function() {
      e(this).attr("data-target") ? x.push(e(this).attr("data-target")) : x.push("");
    });
    var T = new Array;
    e("> div", f).each(function() {
      e(this).attr("data-portrait") ? T.push(e(this).attr("data-portrait")) : T.push("");
    });
    var N = new Array;
    e("> div", f).each(function() {
      e(this).attr("data-alignment") ? N.push(e(this).attr("data-alignment")) : N.push("");
    });
    var C = new Array;
    e("> div", f).each(function() {
      e(this).attr("data-thumb") ? C.push(e(this).attr("data-thumb")) : C.push("");
    });
    var k = E.length;
    e(c).append('<div class="cameraContents" />');
    var L;
    for (L = 0; L < k; L++) {
      e(".cameraContents", c).append('<div class="cameraContent" />');
      if (S[L] != "") {
        var A = e("> div ", f).eq(L).attr("data-box");
        typeof A != "undefined" && A !== !1 && A != "" ? A = 'data-box="' + e("> div ", f).eq(L).attr("data-box") + '"' : A = "";
        e(".camera_target_content .cameraContent:eq(" + L + ")", s).append('<a class="camera_link" href="' + S[L] + '" ' + A + ' target="' + x[L] + '"></a>');
      }
    }
    e(".camera_caption", s).each(function() {
      var t = e(this).parent().index(), n = s.find(".cameraContent").eq(t);
      e(this).appendTo(n);
    });
    l.append('<div class="cameraCont" />');
    var O = e(".cameraCont", s), M;
    for (M = 0; M < k; M++) {
      O.append('<div class="cameraSlide cameraSlide_' + M + '" />');
      var _ = e("> div:eq(" + M + ")", f);
      l.find(".cameraSlide_" + M).clone(_);
    }
    e(window).bind("load resize pageshow", function() {
      ut();
      D();
    });
    O.append('<div class="cameraSlide cameraSlide_' + M + '" />');
    var P;
    s.show();
    var b = l.width(), w = l.height(), H;
    e(window).bind("resize pageshow", function() {
      P == 1 && B();
      e("ul", y).animate({
        "margin-top": 0
      }, 0, ut);
      if (!f.hasClass("paused")) {
        f.addClass("paused");
        if (e(".camera_stop", J).length) {
          e(".camera_stop", J).hide();
          e(".camera_play", J).show();
          u != "none" && e("#" + a).hide();
        } else u != "none" && e("#" + a).hide();
        clearTimeout(H);
        H = setTimeout(function() {
          f.removeClass("paused");
          if (e(".camera_play", J).length) {
            e(".camera_play", J).hide();
            e(".camera_stop", J).show();
            u != "none" && e("#" + a).fadeIn();
          } else u != "none" && e("#" + a).fadeIn();
        }, 1500);
      }
    });
    var j, F, I, q, R, m, g, U, z;
    i() && t.mobileAutoAdvance != "" ? q = t.mobileAutoAdvance : q = t.autoAdvance;
    q == 0 && f.addClass("paused");
    i() && t.mobileNavHover != "" ? R = t.mobileNavHover : R = t.navigationHover;
    if (f.length != 0) {
      var W = e(".cameraSlide", l);
      W.wrapInner('<div class="camerarelative" />');
      var X, V = t.barDirection, J = s;
      e("iframe", o).each(function() {
        var t = e(this), n = t.attr("src");
        t.attr("data-src", n);
        var r = t.parent().index(".camera_src > div");
        e(".camera_target_content .cameraContent:eq(" + r + ")", s).append(t);
      });
      function K() {
        e("iframe", o).each(function() {
          e(".camera_caption", o).show();
          var n = e(this), r = n.attr("data-src");
          n.attr("src", r);
          var i = t.imagePath + "blank.gif", u = new Image;
          u.src = i;
          if (t.height.indexOf("%") != -1) {
            var a = Math.round(b / (100 / parseFloat(t.height)));
            t.minHeight != "" && a < parseFloat(t.minHeight) ? w = parseFloat(t.minHeight) : w = a;
          } else t.height == "auto" ? w = s.height() : w = parseFloat(t.height);
          n.after(e(u).attr({
            "class": "imgFake",
            width: b,
            height: w
          }));
          var f = n.clone();
          n.remove();
          e(u).bind("click", function() {
            if (e(this).css("position") == "absolute") {
              e(this).remove();
              r.indexOf("vimeo") != -1 || r.indexOf("youtube") != -1 ? r.indexOf("?") != -1 ? autoplay = "&autoplay=1" : autoplay = "?autoplay=1" : r.indexOf("dailymotion") != -1 && (r.indexOf("?") != -1 ? autoplay = "&autoPlay=1" : autoplay = "?autoPlay=1");
              f.attr("src", r + autoplay);
              z = !0;
            } else {
              e(this).css({
                position: "absolute",
                top: 0,
                left: 0,
                zIndex: 10
              }).after(f);
              f.css({
                position: "absolute",
                top: 0,
                left: 0,
                zIndex: 9
              });
            }
          });
        });
      }
      K();
      t.hover == 1 && (i() || o.hover(function() {
        f.addClass("hovered");
      }, function() {
        f.removeClass("hovered");
      }));
      if (R == 1) {
        e(d, s).animate({
          opacity: 0
        }, 0);
        e(v, s).animate({
          opacity: 0
        }, 0);
        e(m, s).animate({
          opacity: 0
        }, 0);
        if (i()) {
          o.live("vmouseover", function() {
            e(d, s).animate({
              opacity: 1
            }, 200);
            e(v, s).animate({
              opacity: 1
            }, 200);
            e(m, s).animate({
              opacity: 1
            }, 200);
          });
          o.live("vmouseout", function() {
            e(d, s).delay(500).animate({
              opacity: 0
            }, 200);
            e(v, s).delay(500).animate({
              opacity: 0
            }, 200);
            e(m, s).delay(500).animate({
              opacity: 0
            }, 200);
          });
        } else o.hover(function() {
          e(d, s).animate({
            opacity: 1
          }, 200);
          e(v, s).animate({
            opacity: 1
          }, 200);
          e(m, s).animate({
            opacity: 1
          }, 200);
        }, function() {
          e(d, s).animate({
            opacity: 0
          }, 200);
          e(v, s).animate({
            opacity: 0
          }, 200);
          e(m, s).animate({
            opacity: 0
          }, 200);
        });
      }
      e(".camera_stop", J).live("click", function() {
        q = !1;
        f.addClass("paused");
        if (e(".camera_stop", J).length) {
          e(".camera_stop", J).hide();
          e(".camera_play", J).show();
          u != "none" && e("#" + a).hide();
        } else u != "none" && e("#" + a).hide();
      });
      e(".camera_play", J).live("click", function() {
        q = !0;
        f.removeClass("paused");
        if (e(".camera_play", J).length) {
          e(".camera_play", J).hide();
          e(".camera_stop", J).show();
          u != "none" && e("#" + a).show();
        } else u != "none" && e("#" + a).show();
      });
      t.pauseOnClick == 1 && e(".camera_target_content", o).mouseup(function() {
        q = !1;
        f.addClass("paused");
        e(".camera_stop", J).hide();
        e(".camera_play", J).show();
        e("#" + a).hide();
      });
      e(".cameraContent, .imgFake", o).hover(function() {
        U = !0;
      }, function() {
        U = !1;
      });
      e(".cameraContent, .imgFake", o).bind("click", function() {
        if (z == 1 && U == 1) {
          q = !1;
          e(".camera_caption", o).hide();
          f.addClass("paused");
          e(".camera_stop", J).hide();
          e(".camera_play", J).show();
          e("#" + a).hide();
        }
      });
    }
    if (u != "pie") {
      p.append('<span class="camera_bar_cont" />');
      e(".camera_bar_cont", p).animate({
        opacity: t.loaderOpacity
      }, 0).css({
        position: "absolute",
        left: 0,
        right: 0,
        top: 0,
        bottom: 0,
        "background-color": t.loaderBgColor
      }).append('<span id="' + a + '" />');
      e("#" + a).animate({
        opacity: 0
      }, 0);
      var Y = e("#" + a);
      Y.css({
        position: "absolute",
        "background-color": t.loaderColor
      });
      switch (t.barPosition) {
       case "left":
        p.css({
          right: "auto",
          width: t.loaderStroke
        });
        break;
       case "right":
        p.css({
          left: "auto",
          width: t.loaderStroke
        });
        break;
       case "top":
        p.css({
          bottom: "auto",
          height: t.loaderStroke
        });
        break;
       case "bottom":
        p.css({
          top: "auto",
          height: t.loaderStroke
        });
      }
      switch (V) {
       case "leftToRight":
        Y.css({
          left: 0,
          right: 0,
          top: t.loaderPadding,
          bottom: t.loaderPadding
        });
        break;
       case "rightToLeft":
        Y.css({
          left: 0,
          right: 0,
          top: t.loaderPadding,
          bottom: t.loaderPadding
        });
        break;
       case "topToBottom":
        Y.css({
          left: t.loaderPadding,
          right: t.loaderPadding,
          top: 0,
          bottom: 0
        });
        break;
       case "bottomToTop":
        Y.css({
          left: t.loaderPadding,
          right: t.loaderPadding,
          top: 0,
          bottom: 0
        });
      }
    } else {
      h.append('<canvas id="' + a + '"></canvas>');
      var Z, Y = document.getElementById(a);
      Y.setAttribute("width", t.pieDiameter);
      Y.setAttribute("height", t.pieDiameter);
      var et;
      switch (t.piePosition) {
       case "leftTop":
        et = "left:0; top:0;";
        break;
       case "rightTop":
        et = "right:0; top:0;";
        break;
       case "leftBottom":
        et = "left:0; bottom:0;";
        break;
       case "rightBottom":
        et = "right:0; bottom:0;";
      }
      Y.setAttribute("style", "position:absolute; z-index:1002; " + et);
      var tt, nt;
      if (Y && Y.getContext) {
        var rt = Y.getContext("2d");
        rt.rotate(Math.PI * 1.5);
        rt.translate(-t.pieDiameter, 0);
      }
    }
    if (u == "none" || q == 0) {
      e("#" + a).hide();
      e(".camera_canvas_wrap", J).hide();
    }
    if (e(g).length) {
      e(g).append('<ul class="camera_pag_ul" />');
      var it;
      for (it = 0; it < k; it++) e(".camera_pag_ul", s).append('<li class="pag_nav_' + it + '" style="position:relative; z-index:1002"><span><span>' + it + "</span></span></li>");
      e(".camera_pag_ul li", s).hover(function() {
        e(this).addClass("camera_hover");
        if (e(".camera_thumb", this).length) {
          var t = e(".camera_thumb", this).outerWidth(), n = e(".camera_thumb", this).outerHeight(), r = e(this).outerWidth();
          e(".camera_thumb", this).show().css({
            top: "-" + n + "px",
            left: "-" + (t - r) / 2 + "px"
          }).animate({
            opacity: 1,
            "margin-top": "-3px"
          }, 200);
          e(".thumb_arrow", this).show().animate({
            opacity: 1,
            "margin-top": "-3px"
          }, 200);
        }
      }, function() {
        e(this).removeClass("camera_hover");
        e(".camera_thumb", this).animate({
          "margin-top": "-20px",
          opacity: 0
        }, 200, function() {
          e(this).css({
            marginTop: "5px"
          }).hide();
        });
        e(".thumb_arrow", this).animate({
          "margin-top": "-20px",
          opacity: 0
        }, 200, function() {
          e(this).css({
            marginTop: "5px"
          }).hide();
        });
      });
    }
    if (e(y).length) {
      var st;
      if (!e(g).length) {
        e(y).append("<div />");
        e(y).before('<div class="camera_prevThumbs hideNav"><div></div></div>').before('<div class="camera_nextThumbs hideNav"><div></div></div>');
        e("> div", y).append("<ul />");
        e.each(C, function(t, n) {
          if (e("> div", f).eq(t).attr("data-thumb") != "") {
            var r = e("> div", f).eq(t).attr("data-thumb"), i = new Image;
            i.src = r;
            e("ul", y).append('<li class="pix_thumb pix_thumb_' + t + '" />');
            e("li.pix_thumb_" + t, y).append(e(i).attr("class", "camera_thumb"));
          }
        });
      } else {
        e.each(C, function(t, n) {
          if (e("> div", f).eq(t).attr("data-thumb") != "") {
            var r = e("> div", f).eq(t).attr("data-thumb"), i = new Image;
            i.src = r;
            e("li.pag_nav_" + t, g).append(e(i).attr("class", "camera_thumb").css({
              position: "absolute"
            }).animate({
              opacity: 0
            }, 0));
            e("li.pag_nav_" + t + " > img", g).after('<div class="thumb_arrow" />');
            e("li.pag_nav_" + t + " > .thumb_arrow", g).animate({
              opacity: 0
            }, 0);
          }
        });
        s.css({
          marginBottom: e(g).outerHeight()
        });
      }
    } else !e(y).length && e(g).length && s.css({
      marginBottom: e(g).outerHeight()
    });
    var ot = !0;
    if (e(m).length) {
      e(m).append('<div class="camera_play"></div>').append('<div class="camera_stop"></div>');
      if (q == 1) {
        e(".camera_play", J).hide();
        e(".camera_stop", J).show();
      } else {
        e(".camera_stop", J).hide();
        e(".camera_play", J).show();
      }
    }
    at();
    e(".moveFromLeft, .moveFromRight, .moveFromTop, .moveFromBottom, .fadeIn, .fadeFromLeft, .fadeFromRight, .fadeFromTop, .fadeFromBottom", o).each(function() {
      e(this).css("visibility", "hidden");
    });
    t.onStartLoading.call(this);
    ft();
    e(d).length && e(d).click(function() {
      if (!f.hasClass("camerasliding")) {
        var n = parseFloat(e(".cameraSlide.cameracurrent", l).index());
        clearInterval(j);
        K();
        e("#" + a + ", .camera_canvas_wrap", s).animate({
          opacity: 0
        }, 0);
        at();
        n != 0 ? ft(n) : ft(k);
        t.onStartLoading.call(this);
      }
    });
    e(v).length && e(v).click(function() {
      if (!f.hasClass("camerasliding")) {
        var n = parseFloat(e(".cameraSlide.cameracurrent", l).index());
        clearInterval(j);
        K();
        e("#" + a + ", .camera_canvas_wrap", J).animate({
          opacity: 0
        }, 0);
        at();
        n == k - 1 ? ft(1) : ft(n + 2);
        t.onStartLoading.call(this);
      }
    });
    if (i()) {
      o.bind("swipeleft", function(n) {
        if (!f.hasClass("camerasliding")) {
          var r = parseFloat(e(".cameraSlide.cameracurrent", l).index());
          clearInterval(j);
          K();
          e("#" + a + ", .camera_canvas_wrap", J).animate({
            opacity: 0
          }, 0);
          at();
          r == k - 1 ? ft(1) : ft(r + 2);
          t.onStartLoading.call(this);
        }
      });
      o.bind("swiperight", function(n) {
        if (!f.hasClass("camerasliding")) {
          var r = parseFloat(e(".cameraSlide.cameracurrent", l).index());
          clearInterval(j);
          K();
          e("#" + a + ", .camera_canvas_wrap", J).animate({
            opacity: 0
          }, 0);
          at();
          r != 0 ? ft(r) : ft(k);
          t.onStartLoading.call(this);
        }
      });
    }
    e(g).length && e(".camera_pag li", s).click(function() {
      if (!f.hasClass("camerasliding")) {
        var n = parseFloat(e(this).index()), r = parseFloat(e(".cameraSlide.cameracurrent", l).index());
        if (n != r) {
          clearInterval(j);
          K();
          e("#" + a + ", .camera_canvas_wrap", J).animate({
            opacity: 0
          }, 0);
          at();
          ft(n + 1);
          t.onStartLoading.call(this);
        }
      }
    });
    if (e(y).length) {
      e(".pix_thumb img", y).click(function() {
        if (!f.hasClass("camerasliding")) {
          var n = parseFloat(e(this).parents("li").index()), r = parseFloat(e(".cameracurrent", l).index());
          if (n != r) {
            clearInterval(j);
            K();
            e("#" + a + ", .camera_canvas_wrap", J).animate({
              opacity: 0
            }, 0);
            e(".pix_thumb", y).removeClass("cameracurrent");
            e(this).parents("li").addClass("cameracurrent");
            at();
            ft(n + 1);
            ut();
            t.onStartLoading.call(this);
          }
        }
      });
      e(".camera_thumbs_cont .camera_prevThumbs", J).hover(function() {
        e(this).stop(!0, !1).animate({
          opacity: 1
        }, 250);
      }, function() {
        e(this).stop(!0, !1).animate({
          opacity: .7
        }, 250);
      });
      e(".camera_prevThumbs", J).click(function() {
        var t = 0, n = e(y).outerWidth(), r = e("ul", y).offset().left, i = e("> div", y).offset().left, s = i - r;
        e(".camera_visThumb", y).each(function() {
          var n = e(this).outerWidth();
          t += n;
        });
        s - t > 0 ? e("ul", y).animate({
          "margin-left": "-" + (s - t) + "px"
        }, 500, D) : e("ul", y).animate({
          "margin-left": 0
        }, 500, D);
      });
      e(".camera_thumbs_cont .camera_nextThumbs", J).hover(function() {
        e(this).stop(!0, !1).animate({
          opacity: 1
        }, 250);
      }, function() {
        e(this).stop(!0, !1).animate({
          opacity: .7
        }, 250);
      });
      e(".camera_nextThumbs", J).click(function() {
        var t = 0, n = e(y).outerWidth(), r = e("ul", y).outerWidth(), i = e("ul", y).offset().left, s = e("> div", y).offset().left, o = s - i;
        e(".camera_visThumb", y).each(function() {
          var n = e(this).outerWidth();
          t += n;
        });
        o + t + t < r ? e("ul", y).animate({
          "margin-left": "-" + (o + t) + "px"
        }, 500, D) : e("ul", y).animate({
          "margin-left": "-" + (r - n) + "px"
        }, 500, D);
      });
    }
  };
})(jQuery);

(function(e) {
  e.fn.cameraStop = function() {
    var t = e(this), n = e(".camera_src", t), r = "pie_" + t.index();
    n.addClass("stopped");
    if (e(".camera_showcommands").length) var i = e(".camera_thumbs_wrap", t); else var i = t;
  };
})(jQuery);

(function(e) {
  e.fn.cameraPause = function() {
    var t = e(this), n = e(".camera_src", t);
    n.addClass("paused");
  };
})(jQuery);

(function(e) {
  e.fn.cameraResume = function() {
    var t = e(this), n = e(".camera_src", t);
    (typeof autoAdv == "undefined" || autoAdv !== !0) && n.removeClass("paused");
  };
})(jQuery);